# parameters used in building MAKI

import boto3

####
# Helper function to get SSM parameters
def get_ssm_parameter(parameter_name):
    """Get parameter value from SSM Parameter Store"""
    import boto3
    ssm = boto3.client('ssm')
    try:
        account_id = boto3.client('sts').get_caller_identity()['Account']
        region = boto3.Session().region_name
        response = ssm.get_parameter(Name=f"maki-{account_id}-{region}-{parameter_name}")
        return response['Parameter']['Value']
    except Exception as e:
        print(f"Error getting {parameter_name} from SSM: {e}")
        return '2023-01-01T00:00:00Z'  # default fallback

###
# Support Case Categories
# need to add more categories
CATEGORIES = [
    'limit-reached', 
    'customer-release',
    'development-issue',
    'customer-networking',
    'throttling',
    'ice-error',
    'feature-request',
    'customer-dependency',
    'aws-release',
    'customer-question',
    'exceeding-capability',
    'lack-monitoring',
    'security-issue',
    'service-event',
    'transient-issues',
    'upgrade-management'
]
# where example category files are stored, relative to base
CATEGORY_DIR =  'categories'

###
# Default mode when not specified in input
DEFAULT_MODE = 'health'

###
# General
def get_region():
    try:
        ec2 = boto3.client('ec2')
        return ec2.meta.region_name
    except:
        return 'us-east-1'  # fallback

REGION = get_region()

#####
# Tags 
PROJ = 'maki'
AUTODELETE = 'no'

#####
# Unique Key

sts_client = boto3.client("sts")
account_id = sts_client.get_caller_identity()["Account"]
KEY = PROJ + '-' + account_id + '-' + REGION

###
# Bedrock
# must use cross region inference profiles
# must support prompt caching
BEDROCK_TEXT_MODEL = "us.amazon.nova-micro-v1:0"
BEDROCK_EMBEDDING_MODEL = "amazon.titan-embed-text-v2:0"
BEDROCK_THROTTLE_DELAY_SECONDS = 3
BEDROCK_MAX_TOKENS = 10240
BEDROCK_CATEGORIZE_TEMPERATURE = 0.5
BEDROCK_CATEGORIZE_TOP_P = 0.1
BEDROCK_SUMMARY_TEMPERATURE = 0.3
BEDROCK_SUMMARY_TOP_P = 0.5
BEDROCK_ONDEMAND_BATCH_INFLECTION = 100

BEDROCK_TEXT_MODEL_AGG = "us.anthropic.claude-3-7-sonnet-20250219-v1:0"
BEDROCK_MAX_TOKENS_AGG = 131072 

###
# Synthetic case generation
SYNTH_CASES_MAX_TOKENS = 10240
SYNTH_CASES_NUMBER_SEED = 2 
SYNTH_CASES_TEMPERATURE = 0.3
SYNTH_CASES_CATEGORIZE_TOP_P = 0.1

# Proper LLM output format in JSON
# this is in in str format as it needs to feed into the Bedrock prompt as a str
CASES_CATEGORY_OUTPUT_FORMAT = "{ \
 \"caseId\": caseId, \
 \"displayId\": DisplayId, \
 \"status\": status, \
 \"serviceCode\": serviceCode, \
 \"timeCreated\": timeCreated, \
 \"timeResolved\" timeResolved, \
 \"submittedBY\": submittedBy, \
 \"category\": Category, \
 \"category_explanation\": Category_Explanation, \
 \"case_summary\": Case_Summary, \
 \"sentiment\": Sentiment, \
 \"suggested_action\": Suggested_Action \
 \"suggestion_link\": Suggestion_Link\
}"

# Popular AWS Support service codes for synthetic case generation
POPULAR_SERVICE_CODES = [
    "amazon-elastic-compute-cloud-linux",
    "amazon-simple-storage-service",
    "amazon-relational-database-service",
    "aws-lambda",
    "amazon-cloudfront",
    "amazon-elastic-load-balancing",
    "amazon-virtual-private-cloud",
    "amazon-simple-email-service",
    "amazon-dynamodb",
    "billing"
]

# Popular AWS Health service codes for synthetic health event generation
POPULAR_HEALTH_SERVICES = {
    "EC2": [
        "AWS_EC2_AL_AMI_ISSUE",
        "AWS_EC2_API_ISSUE",
        "AWS_EC2_BILLING_NOTIFICATION",
        "AWS_EC2_BYOASN_ROAS_EXPIRING",
        "AWS_EC2_BYOASN_RPKI_INVALID",
        "AWS_EC2_BYOASN_RPKI_UNKNOWN",
        "AWS_EC2_BYOIP_ROAS_EXPIRING",
        "AWS_EC2_BYOIP_RPKI_INVALID",
        "AWS_EC2_BYOIP_RPKI_UNKNOWN",
        "AWS_EC2_CAPACITY_BLOCKS_API_ISSUE",
        "AWS_EC2_CAPACITY_BLOCKS_API_LATENCY_ISSUE",
        "AWS_EC2_CAPACITY_MANAGER_API_ISSUE",
        "AWS_EC2_CAPACITY_MANAGER_API_LATENCY_ISSUE",
        "AWS_EC2_CLASSIC_NETWORK_HEALTH_INTERNET_ISSUE",
        "AWS_EC2_CLASSIC_NETWORK_HEALTH_INTER_AZ_ISSUE",
        "AWS_EC2_CLASSIC_NETWORK_HEALTH_INTRA_AZ_ISSUE",
        "AWS_EC2_CONSOLE_LOAD_FAILURE_ISSUE",
        "AWS_EC2_CUSTOMER_ENGAGEMENT",
        "AWS_EC2_DEDICATED_HOST_ACCESS_REVOKED_RETIREMENT_SCHEDULED",
        "AWS_EC2_DEDICATED_HOST_MAINTENANCE_SCHEDULED",
        "AWS_EC2_DEDICATED_HOST_NETWORK_MAINTENANCE_SCHEDULED",
        "AWS_EC2_DEDICATED_HOST_POWER_MAINTENANCE_SCHEDULED",
        "AWS_EC2_DEDICATED_HOST_RETIREMENT_SCHEDULED",
        "AWS_EC2_DEDICATED_HOST_UNDER_RESERVATION_REPLACE",
        "AWS_EC2_DH_INSTANCE_RECOVERY_FAILURE",
        "AWS_EC2_DH_INSTANCE_RECOVERY_SUCCESS",
        "AWS_EC2_DNS_RESOLUTION_ISSUE",
        "AWS_EC2_ELASTIC_GRAPHICS_MAINTENANCE",
        "AWS_EC2_HOST_RECOVERY_COMPLETION",
        "AWS_EC2_HOST_RECOVERY_FAILURE",
        "AWS_EC2_HOST_RECOVERY_INITIATION",
        "AWS_EC2_HOST_RECOVERY_PARTIAL_SUCCESS",
        "AWS_EC2_HOST_RECOVERY_SUCCESS",
        "AWS_EC2_HOST_RECOVERY_UNSUPPORTED",
        "AWS_EC2_INCREASED_LAUNCH_FAILURES",
        "AWS_EC2_INSTANCE_AUTO_RECOVERY_FAILURE",
        "AWS_EC2_INSTANCE_AUTO_RECOVERY_NO_ACTION",
        "AWS_EC2_INSTANCE_AUTO_RECOVERY_SUCCESS",
        "AWS_EC2_INSTANCE_AVAILABILITY_ISSUE",
        "AWS_EC2_INSTANCE_AVAILABILITY_ISSUE_LOCAL_ZONE",
        "AWS_EC2_INSTANCE_CONSTRAINED_BANDWIDTH_ISSUE",
        "AWS_EC2_INSTANCE_END_OF_LIFE_STOP_SCHEDULED",
        "AWS_EC2_INSTANCE_NETWORK_MAINTENANCE_SCHEDULED",
        "AWS_EC2_INSTANCE_POWER_MAINTENANCE_FAILED",
        "AWS_EC2_INSTANCE_POWER_MAINTENANCE_SCHEDULED",
        "AWS_EC2_INSTANCE_REBOOT_FLEXIBLE_MAINTENANCE_SCHEDULED",
        "AWS_EC2_INSTANCE_REBOOT_MAINTENANCE_SCHEDULED",
        "AWS_EC2_INSTANCE_RETIREMENT_EXPEDITED",
        "AWS_EC2_INSTANCE_RETIREMENT_SCHEDULED",
        "AWS_EC2_INSTANCE_STOP_SCHEDULED",
        "AWS_EC2_INSTANCE_STORE_DRIVE_PERFORMANCE_DEGRADED",
        "AWS_EC2_INSTANCE_TERMINATION_SCHEDULED",
        "AWS_EC2_LOCAL_ZONE_INCREASED_LAUNCH_FAILURES",
        "AWS_EC2_LOCAL_ZONE_INTERNET_CONNECTIVITY_DEGRADATION",
        "AWS_EC2_LOCAL_ZONE_PARENT_REGION_CONNECTIVITY_DEGRADATION",
        "AWS_EC2_LOCAL_ZONE_PARENT_REGION_NETWORK_HARDWARE_DEGRADATION",
        "AWS_EC2_LOCAL_ZONE_SERVICELINK_DISCONNECTED",
        "AWS_EC2_MAINTENANCE_SCHEDULED",
        "AWS_EC2_NETWORK_CONNECTIVITY_ISSUE",
        "AWS_EC2_OCDR_NOTIFICATIONS",
        "AWS_EC2_ODCR_CANCELED",
        "AWS_EC2_ODCR_CANCELLED",
        "AWS_EC2_ODCR_DELAYED",
        "AWS_EC2_ODCR_DEPOSIT_CONFIRMATION",
        "AWS_EC2_ODCR_PENDING_CAPACITY_RESERVATION",
        "AWS_EC2_ODCR_SCHEDULED",
        "AWS_EC2_ODCR_SCHEDULE_CONFIRMATION",
        "AWS_EC2_ODCR_UNDERUTILIZATION_NOTIFICATION",
        "AWS_EC2_ODCR_UNDERUTILIZATION_NOTIFICATION_SUMMARY",
        "AWS_EC2_ODCR_UPCOMING_DEPOSIT",
        "AWS_EC2_OPERATIONAL_ISSUE",
        "AWS_EC2_OPERATIONAL_NOTIFICATION",
        "AWS_EC2_PERSISTENT_INSTANCE_POWER_MAINTENANCE_SCHEDULED",
        "AWS_EC2_PERSISTENT_INSTANCE_RETIREMENT_EXPEDITED",
        "AWS_EC2_PERSISTENT_INSTANCE_RETIREMENT_SCHEDULED",
        "AWS_EC2_PLANNED_LIFECYCLE_EVENT",
        "AWS_EC2_POD_CAPACITY_REDUCED",
        "AWS_EC2_POWER_CONNECTIVITY_ISSUE",
        "AWS_EC2_RI_API_ISSUE",
        "AWS_EC2_RI_MARKETPLACE_BANK_ACCOUNT_UPDATE_REQUIRED",
        "AWS_EC2_RUNINSTANCES_API_ISSUE",
        "AWS_EC2_SECURITY_NOTIFICATION",
        "AWS_EC2_SIMPLIFIED_AUTO_RECOVERY_FAILURE",
        "AWS_EC2_SIMPLIFIED_AUTO_RECOVERY_SUCCESS",
        "AWS_EC2_SPOT_API_UNAVAILABILITY",
        "AWS_EC2_ULTRASERVER_CAPACITY_REDUCED",
        "AWS_EC2_ULTRASERVER_MAINTENANCE_COMPLETED",
        "AWS_EC2_ULTRASERVER_MAINTENANCE_INITIATED",
        "AWS_EC2_ULTRASERVER_RECOVERY_COMPLETED",
        "AWS_EC2_VPC_API_ISSUE",
        "AWS_EC2_VPC_NETWORK_HEALTH_INTERNET_ISSUE",
        "AWS_EC2_VPC_NETWORK_HEALTH_INTER_AZ_ISSUE",
        "AWS_EC2_VPC_NETWORK_HEALTH_INTRA_AZ_ISSUE",
    ],
    "SAGEMAKER": [
        "AWS_SAGEMAKER_ANALYTICS_WORKFLOW_FAULT_ISSUE",
        "AWS_SAGEMAKER_API_FAULT",
        "AWS_SAGEMAKER_API_LATENCY",
        "AWS_SAGEMAKER_ASSETS_WORKFLOW_ISSUE",
        "AWS_SAGEMAKER_BATCH_METRIC_API_ISSUE",
        "AWS_SAGEMAKER_CANVAS_DATA_PLANE_AVAILABILITY_ISSUE",
        "AWS_SAGEMAKER_CRESCENDO_API_ISSUE",
        "AWS_SAGEMAKER_CRESCENDO_WORKFLOW_FAULTS",
        "AWS_SAGEMAKER_CRESCENDO_WORKFLOW_LATENCY",
        "AWS_SAGEMAKER_ENDPOINT_PATCHING_ISSUE",
        "AWS_SAGEMAKER_FLEXIBLE_TRAINING_PLAN_API_ISSUE",
        "AWS_SAGEMAKER_FLEXIBLE_TRAINING_PLAN_WORKFLOW_ISSUE",
        "AWS_SAGEMAKER_GROUNDTRUTH_CUSTOMER_ENGAGEMENT",
        "AWS_SAGEMAKER_HOSTING_CONTROLPLANE_API_FAULT_ISSUE",
        "AWS_SAGEMAKER_HOSTING_CONTROLPLANE_WORKFLOW_LATENCY_ISSUE",
        "AWS_SAGEMAKER_HPO_WORKFLOW_FAULT",
        "AWS_SAGEMAKER_HYPERPOD_AMI_RELEASE",
        "AWS_SAGEMAKER_HYPERPOD_API_ISSUE",
        "AWS_SAGEMAKER_HYPERPOD_ULTRASERVER_CAPACITY_REDUCED",
        "AWS_SAGEMAKER_HYPERPOD_ULTRASERVER_INTERCONNECT_IMPAIRED",
        "AWS_SAGEMAKER_HYPERPOD_ULTRASERVER_RECOVERY_COMPLETE",
        "AWS_SAGEMAKER_HYPERPOD_ULTRASERVER_RETIREMENT",
        "AWS_SAGEMAKER_HYPERPOD_UPCOMING_SCHEDULED_UPGRADE",
        "AWS_SAGEMAKER_HYPERPOD_WORKFLOW_FAULTS",
        "AWS_SAGEMAKER_HYPERPOD_WORKFLOW_LATENCY",
        "AWS_SAGEMAKER_INFERENCE_RECOMMENDER_API_ISSUE",
        "AWS_SAGEMAKER_MAINTENANCE_REPORT",
        "AWS_SAGEMAKER_MAINTENANCE_REPORT_RSTUDIO",
        "AWS_SAGEMAKER_MLFLOW_API_ISSUE",
        "AWS_SAGEMAKER_MODELCARDS_WORKFLOW_ISSUE",
        "AWS_SAGEMAKER_MODEL_REGISTRY_API_FAULT",
        "AWS_SAGEMAKER_MODEL_REGISTRY_WORKFLOW_LATENCY",
        "AWS_SAGEMAKER_NOTEBOOKS_SCHEDULED_MAINTENANCE",
        "AWS_SAGEMAKER_NOTEBOOKS_UPCOMING_MAINTENANCE",
        "AWS_SAGEMAKER_NOTEBOOK_INSTANCE_RETIREMENT",
        "AWS_SAGEMAKER_OPERATIONAL_ISSUE",
        "AWS_SAGEMAKER_OPERATIONAL_NOTIFICATION",
        "AWS_SAGEMAKER_PIPELINES_API_ISSUE",
        "AWS_SAGEMAKER_PLANNED_LIFECYCLE_EVENT",
        "AWS_SAGEMAKER_PROJECT_API_FAULT",
        "AWS_SAGEMAKER_SCHEDULED_MAINTENANCE",
        "AWS_SAGEMAKER_SECURITY_NOTIFICATION",
        "AWS_SAGEMAKER_STUDIO_KERNEL_ISSUE",
        "AWS_SAGEMAKER_UPCOMING_IMAGE_DEPRECATION",
        "AWS_SAGEMAKER_UPCOMING_MAINTENANCE",
        "AWS_SAGEMAKER_UPCOMING_MAINTENANCE_RSTUDIO_PHASE_1",
    ],
    "S3": [
        "AWS_S3_API_ISSUE",
        "AWS_S3_BILLING_NOTIFICATION",
        "AWS_S3_CONSOLE_ISSUE",
        "AWS_S3_CUSTOMER_ENGAGEMENT",
        "AWS_S3_INCREASED_BATCH_OPERATIONS_API_ERROR_RATES",
        "AWS_S3_INCREASED_GET_API_ERROR_RATES",
        "AWS_S3_INCREASED_GET_API_LATENCY",
        "AWS_S3_INCREASED_PUT_API_ERROR_RATES",
        "AWS_S3_INCREASED_PUT_API_LATENCY",
        "AWS_S3_MAINTENANCE_SCHEDULED",
        "AWS_S3_MRAP_CREATE_ISSUE",
        "AWS_S3_MRAP_DELETE_ISSUE",
        "AWS_S3_MRAP_UPDATE_POLICY_ISSUE",
        "AWS_S3_OPEN_ACCESS_BUCKET_NOTIFICATION",
        "AWS_S3_OPERATIONAL_ISSUE",
        "AWS_S3_OPERATIONAL_NOTIFICATION",
        "AWS_S3_PLANNED_LIFECYCLE_EVENT",
        "AWS_S3_PRIVATELINK_AVAILABILITY_ISSUE",
        "AWS_S3_PRIVATELINK_LATENCY_ISSUE",
        "AWS_S3_PRIVATELINK_PROVISIONING_TIME_ISSUE",
        "AWS_S3_REPLICATION_CLOUDWATCH_DELAYS",
        "AWS_S3_REPLICATION_TIME_CONTROL_DELAYS",
        "AWS_S3_SECURITY_NOTIFICATION",
        "AWS_S3_SELECTSERVICE_DEEMPHASIS",
        "AWS_S3_TABLES_API_ISSUE",
        "AWS_S3_TABLES_API_LATENCY",
    ],
    "RDS": [
        "AWS_RDS_API_ISSUE",
        "AWS_RDS_AURORA_MYSQL_INCOMPATIBLE_PARAMETERS",
        "AWS_RDS_AURORA_MYSQL_INCOMPATIBLE_PARAMETER_CHARSET_COLLATION",
        "AWS_RDS_AURORA_MYSQL_INSTANCE_CRASHING_REPEATEDLY",
        "AWS_RDS_AURORA_MYSQL_INSTANCE_HEAVY_WORKLOAD",
        "AWS_RDS_AURORA_MYSQL_PERFORMANCE_SCHEMA_ENABLED",
        "AWS_RDS_AURORA_MYSQL_T2_CPU_CREDITS",
        "AWS_RDS_AURORA_MYSQL_T2_CPU_CREDIT_EXHAUSTION",
        "AWS_RDS_AURORA_SAZ_DB_INSTANCE_FAILURES",
        "AWS_RDS_CONNECTIVITY_ISSUE",
        "AWS_RDS_CUSTOMER_ENGAGEMENT",
        "AWS_RDS_DATABASE_ACTIVITY_STREAMS_KMS_NOT_ACCESSIBLE",
        "AWS_RDS_EXPORT_TASK_FAILED",
        "AWS_RDS_HARDWARE_MAINTENANCE_SCHEDULED",
        "AWS_RDS_INCREASED_CREATE_SCALING_LATENCIES",
        "AWS_RDS_INSTANCE_HAS_LAGGING_PITR_DUE_TO_CPU_UTILIZATION",
        "AWS_RDS_INSTANCE_HAS_PERFORMANCE_ISSUES_DUE_TO_GP2_DEPLETION",
        "AWS_RDS_INSTANCE_IS_UNSTABLE_DUE_TO_MEMORY_SHORTAGE",
        "AWS_RDS_INSTANCE_OPERATIONAL_NOTIFICATION",
        "AWS_RDS_INSTANCE_PUT_IN_INCOMPATIBLE-PARAMETERS_DUE_TO_MEMORY_SHORTAGE",
        "AWS_RDS_INSTANCE_SHORT_ON_DISK_SPACE",
        "AWS_RDS_LOWER_CASE_TABLE_NAMES_IS_NOT_SUPPORTED",
        "AWS_RDS_MAINTENANCE_SCHEDULED",
        "AWS_RDS_MYSQL_DATABASE_CRASHING_REPEATEDLY",
        "AWS_RDS_OPERATIONAL_ISSUE",
        "AWS_RDS_OPERATIONAL_NOTIFICATION",
        "AWS_RDS_PLANNED_LIFECYCLE_EVENT",
        "AWS_RDS_POINT_IN_TIME_FAILURE",
        "AWS_RDS_PUBLIC_SNAPSHOT",
        "AWS_RDS_READ_REPLICA_PUT_IN_FAILED_DUE_TO_STORAGE_FAILURE",
        "AWS_RDS_SAZ_DB_INSTANCE_FAILURES",
        "AWS_RDS_SECURITY_NOTIFICATION",
        "AWS_RDS_SINGLE-AZ_INSTANCE_PUT_IN_FAILED_DUE_TO_STORAGE_FAILURE",
        "AWS_RDS_SQL_SERVER_PITR_FAILURE_LSN_GAP",
        "AWS_RDS_STORAGE_FAILURE_DB_CORRUPTION",
        "AWS_RDS_STORAGE_FAILURE_MAZ",
        "AWS_RDS_STORAGE_FAILURE_READREPLICA",
        "AWS_RDS_STORAGE_FAILURE_SAZ",
        "AWS_RDS_SYSTEM_UPGRADE_SCHEDULED",
    ],
    "DYNAMODB": [
        "AWS_DYNAMODB_ACCESS_CONTROL_API_ISSUE",
        "AWS_DYNAMODB_API_ERROR_RATE",
        "AWS_DYNAMODB_API_ISSUE",
        "AWS_DYNAMODB_API_LATENCY",
        "AWS_DYNAMODB_BACKUP_API_ISSUE",
        "AWS_DYNAMODB_CLOUDWATCH_CONTRIBUTOR_INSIGHTS_METRICS_ISSUE",
        "AWS_DYNAMODB_EAR_INACCESSIBLE_TABLE_ENCRYPTION",
        "AWS_DYNAMODB_EXPORT_API_ISSUE",
        "AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_PROPAGATION_DELAYS",
        "AWS_DYNAMODB_GLOBAL_TABLES_ACCOUNT_QUOTA_EXCEEDED",
        "AWS_DYNAMODB_GLOBAL_TABLES_INSUFFICIENT_PERMISSIONS",
        "AWS_DYNAMODB_GLOBAL_TABLES_MRSC_API_ISSUE",
        "AWS_DYNAMODB_GLOBAL_TABLES_MRSC_LATENCY",
        "AWS_DYNAMODB_GLOBAL_TABLES_NAMING_CONFLICT",
        "AWS_DYNAMODB_GLOBAL_TABLES_REPLICATION_NOT_AUTHORIZED",
        "AWS_DYNAMODB_GLOBAL_TABLES_REPLICA_DISASSOCIATED",
        "AWS_DYNAMODB_GLOBAL_TABLES_REPLICA_NOT_ACCESSIBLE",
        "AWS_DYNAMODB_GLOBAL_TABLES_REPLICA_NOT_AUTHORIZED",
        "AWS_DYNAMODB_GLOBAL_TABLES_UNSUPPORTED_CONFIGURATION",
        "AWS_DYNAMODB_GSI_ISSUE",
        "AWS_DYNAMODB_GT_INACCESSIBLE_CMCMK_REPLICA_DETECTED",
        "AWS_DYNAMODB_GT_INACCESSIBLE_CMCMK_REPLICA_REMOVED",
        "AWS_DYNAMODB_GT_WCU_MISMATCH",
        "AWS_DYNAMODB_GT_WCU_MISMATCH_REPLICATION_THROTTLED",
        "AWS_DYNAMODB_GT_WORKFLOW_FAILED",
        "AWS_DYNAMODB_IMPORT_API_ISSUE",
        "AWS_DYNAMODB_KDSD_KMS_INACCESSIBLE_CREDENTIALS",
        "AWS_DYNAMODB_KDSD_STREAM_DISABLED",
        "AWS_DYNAMODB_KDSD_UNDER_PROVISIONING",
        "AWS_DYNAMODB_OPERATIONAL_ISSUE",
        "AWS_DYNAMODB_OPERATIONAL_NOTIFICATION",
        "AWS_DYNAMODB_REPLICATION_DELAY",
        "AWS_DYNAMODB_RESTORE_API_ISSUE",
        "AWS_DYNAMODB_SECURITY_NOTIFICATION",
        "AWS_DYNAMODB_STREAMS_RECORDS_DELAY",
    ],
    "BILLING": [
        "AWS_BILLING_ACCOUNT_RESTRICTED_DUE_TO_NON_PAYMENT",
        "AWS_BILLING_API_ISSUE",
        "AWS_BILLING_BCM_DASHBOARDS_API_ISSUE",
        "AWS_BILLING_BCM_DATA_EXPORTS_API_ISSUE",
        "AWS_BILLING_BCM_PRICING_CALCULATOR_API_ISSUE",
        "AWS_BILLING_BCM_RECOMMENDED_ACTIONS_API_ISSUE",
        "AWS_BILLING_BUDGETS_API_ISSUE",
        "AWS_BILLING_CONSOLE_CLIENT_SIDE_AVAILABILITY_ISSUE",
        "AWS_BILLING_COSTEXPLORER_API_ISSUE",
        "AWS_BILLING_COSTEXPLORER_PAGE_AVAILABILITY_ISSUE",
        "AWS_BILLING_COST_AND_USAGE_REPORTS_DATA_QUALITY_ISSUE",
        "AWS_BILLING_CREDIT_CARD_PAYMENT_ISSUE",
        "AWS_BILLING_CUSTOMER_ENGAGEMENT",
        "AWS_BILLING_DATA_DELAY",
        "AWS_BILLING_FREETIER_API_ISSUE",
        "AWS_BILLING_INVOICE_UNIT_API_ISSUE",
        "AWS_BILLING_INVOICING_API_ISSUE",
        "AWS_BILLING_NOTIFICATION",
        "AWS_BILLING_OPERATIONAL_ISSUE",
        "AWS_BILLING_PAYMENTS_VERIFICATION_AVAILABILITY_ISSUE",
        "AWS_BILLING_PAYMENT_METHODS_API_ISSUE",
        "AWS_BILLING_PAYMENT_METHODS_API_LATENCY",
        "AWS_BILLING_PAYMENT_PORTAL_API_ISSUE",
        "AWS_BILLING_PAYMENT_PORTAL_AVAILABILITY_ISSUE",
        "AWS_BILLING_PAYMENT_POSTING_DELAYED",
        "AWS_BILLING_PAYMENT_PREFERENCES_AVAILABILITY_ISSUE",
        "AWS_BILLING_PAYMENT_PROFILES_API_ISSUE",
        "AWS_BILLING_PAYMENT_PROFILES_API_LATENCY",
        "AWS_BILLING_PLANNED_LIFECYCLE_EVENT",
        "AWS_BILLING_SECURITY_NOTIFICATION",
        "AWS_BILLING_SUSPENSION_NOTICE",
        "AWS_BILLING_TAX_CONSOLE_ISSUE",
    ],
    "LAMBDA": [
        "AWS_LAMBDA_API_ISSUE",
        "AWS_LAMBDA_COLD_INVOKE_ISSUE",
        "AWS_LAMBDA_CONSOLE_ISSUE",
        "AWS_LAMBDA_CUSTOMER_ENGAGEMENT",
        "AWS_LAMBDA_FUNCTION_DEPLOYMENT_ISSUE",
        "AWS_LAMBDA_IAM_ISSUE",
        "AWS_LAMBDA_MAINTENANCE_SCHEDULED",
        "AWS_LAMBDA_MANAGED_INSTANCES_INVOKE_ISSUE",
        "AWS_LAMBDA_NONVPC_FUNCTION_ERRORS",
        "AWS_LAMBDA_OPERATIONAL_ISSUE",
        "AWS_LAMBDA_OPERATIONAL_NOTIFICATION",
        "AWS_LAMBDA_PLANNED_LIFECYCLE_EVENT",
        "AWS_LAMBDA_RUNAWAY_TERMINATION_NOTIFICATION",
        "AWS_LAMBDA_SECURITY_NOTIFICATION",
        "AWS_LAMBDA_VPC_FUNCTION_ERRORS",
    ],
    "CLOUDWATCH": [
        "AWS_CLOUDWATCH_ALARMS_API_ISSUE",
        "AWS_CLOUDWATCH_ALARMS_COMPOSITEALARM_PROCESSING_DELAYS",
        "AWS_CLOUDWATCH_ALARMS_HISTORY_UPDATE_ISSUE",
        "AWS_CLOUDWATCH_ALARMS_PROCESSING_FAILURES",
        "AWS_CLOUDWATCH_ALARM_DELAYS",
        "AWS_CLOUDWATCH_API_ISSUE",
        "AWS_CLOUDWATCH_APPLICATION_SIGNALS_API_ISSUE",
        "AWS_CLOUDWATCH_APPLICATION_SIGNALS_CONSOLE_AVAILABILITY",
        "AWS_CLOUDWATCH_APPLICATION_SIGNALS_CONSOLE_LATENCIES",
        "AWS_CLOUDWATCH_APPLICATION_SIGNAL_API_LATENCIES",
        "AWS_CLOUDWATCH_APPLICATION_SIGNAL_PROCESSING_DELAYS",
        "AWS_CLOUDWATCH_CONSOLE_ISSUE",
        "AWS_CLOUDWATCH_DELAYED_METRICS",
        "AWS_CLOUDWATCH_LOGS_DESCRIBELOGGROUPS_API_ISSUE",
        "AWS_CLOUDWATCH_LOGS_GETLOGEVENTS_API_ISSUE",
        "AWS_CLOUDWATCH_LOGS_INSIGHTS_INDEXING_DELAYS",
        "AWS_CLOUDWATCH_LOGS_INTEGRATION_API_ISSUE",
        "AWS_CLOUDWATCH_LOGS_INTEGRATION_API_LATENCY",
        "AWS_CLOUDWATCH_MAINTENANCE_SCHEDULED",
        "AWS_CLOUDWATCH_METRICS_GETMETRICDATA_API_ISSUE",
        "AWS_CLOUDWATCH_METRICS_GETMETRICSTATISTICS_API_ISSUE",
        "AWS_CLOUDWATCH_METRICS_INCREASED_GETMETRICDATA_API_LATENCIES",
        "AWS_CLOUDWATCH_METRICS_INCREASED_GETMETRICSTATISTICS_API_LATENCIES",
        "AWS_CLOUDWATCH_METRICS_INCREASED_PUTMETRICDATA_API_LATENCIES",
        "AWS_CLOUDWATCH_OAM_API_ISSUE",
        "AWS_CLOUDWATCH_OPERATIONAL_ISSUE",
        "AWS_CLOUDWATCH_OPERATIONAL_NOTIFICATION",
        "AWS_CLOUDWATCH_PLANNED_LIFECYCLE_EVENT",
        "AWS_CLOUDWATCH_SECURITY_NOTIFICATION",
    ],
    "VPC": [
        "AWS_VPC_API_ISSUE",
        "AWS_VPC_CONNECTIVITY_ISSUE",
        "AWS_VPC_INCREASED_MANAGEMENT_CONSOLE_ERROR_RATES",
        "AWS_VPC_OPERATIONAL_ISSUE",
        "AWS_VPC_OPERATIONAL_NOTIFICATION",
        "AWS_VPC_PLANNED_LIFECYCLE_EVENT",
        "AWS_VPC_ROUTE_SERVER_ENDPOINT_PLANNED_MAINTENANCE_EVENT",
        "AWS_VPC_ROUTE_SERVER_ENDPOINT_URGENT_MAINTENANCE_EVENT",
        "AWS_VPC_SECURITY_NOTIFICATION",
    ],
    "SES": [
        "AWS_SES_API_ISSUE",
        "AWS_SES_CMF_PENDING_TO_FAILED",
        "AWS_SES_CMF_PENDING_TO_SUCCESS",
        "AWS_SES_CMF_SUCCESS_TO_TEMPORARY_FAILURE",
        "AWS_SES_CMF_TEMPORARY_FAILURE_TO_FAILED",
        "AWS_SES_CMF_TEMPORARY_FAILURE_TO_SUCCESS",
        "AWS_SES_CUSTOMER_ENGAGEMENT",
        "AWS_SES_DEPRECATED_CREDENTIALS_USAGE_SIGV3",
        "AWS_SES_DKIM_FAILED_TO_VERIFIED",
        "AWS_SES_DKIM_PENDING_TO_FAILED",
        "AWS_SES_DKIM_PENDING_TO_VERIFIED",
        "AWS_SES_DKIM_VERIFIED_TO_FAILED",
        "AWS_SES_ENFORCEMENT_HEAL",
        "AWS_SES_ENFORCEMENT_PROBATION",
        "AWS_SES_ENFORCEMENT_SHUTDOWN",
        "AWS_SES_ESM_FIREHOSE_STREAM_ENABLED_TO_DISABLED",
        "AWS_SES_ESM_SNS_TOPIC_ENABLED_TO_DISABLED",
        "AWS_SES_HEAL",
        "AWS_SES_OPERATIONAL_ISSUE",
        "AWS_SES_OPERATIONAL_NOTIFICATION",
        "AWS_SES_PLANNED_LIFECYCLE_EVENT",
        "AWS_SES_PROBATION",
        "AWS_SES_SECURITY_NOTIFICATION",
        "AWS_SES_SHUTDOWN",
        "AWS_SES_SNS_PUBLISH_FAILURE",
        "AWS_SES_VERIFICATION_FAILING",
        "AWS_SES_VERIFICATION_PENDING_TO_FAILED",
        "AWS_SES_VERIFICATION_PENDING_TO_SUCCESS",
    ],
}

HEALTH_OUTPUT_FORMAT = "{ \
\"arn\": \"arn\", \
\"service\": \"service\", \
\"eventTypeCode\": \"eventTypeCode\", \
\"eventTypeCategory\": \"eventTypeCategory\", \
\"region\": \"region\", \
\"startTime\": \"startTime\", \
\"lastUpdatedTime\": \"lastUpdatedTime\", \
\"statusCode\": \"statusCode\", \
\"eventScopeCode\": \"eventScopeCode\", \
\"latestDescription\": \"latestDescription\", \
\"event_summary\": \"event_summary\", \
\"suggestion_action\": \"suggestion_action\", \
\"suggestion_link\": \"suggestion_link\" \
}"

SUMMARY_OUTPUT_FORMAT = "{ \
 \"summary\": Summary, \
 \"plan\": Plan \
}"

###
# State Machine
STATE_MACHINE_NAME_BASE = 'state-machine' 
STATE_MACHINE_TIMEOUT = 3600 #seconds
CRON_MAIN_JOB_NAME_BASE = 'cron-job-main'
CRON_MAIN_MINUTE = '0'
CRON_MAIN_HOUR = '6'
CRON_MAIN_DAY = '*'
CRON_MAIN_MONTH = '*'
CRON_MAIN_YEAR = '*'
BEDROCK_BATCH_INF_WAIT_BASE = 'batch-inference-wait'
BEDROCK_BATCH_RULE_BASE = 'bedrock-batch-completion-rule'
EVENT_ITERATOR_MAX_PARALLEL = 1

POST_BATCH_CHECK_INTERVAL_MIN = 1

# report cron
CRON_REPORT_JOB_NAME_BASE = 'cron-job-report'
CRON_REPORT_MINUTE = '*/5'
CRON_REPORT_HOUR = '*'
CRON_REPORT_DAY = '*'
CRON_REPORT_MONTH = '*'
CRON_REPORT_YEAR = '*'

# CloudWatch
LOG_GROUP_NAME_BASE = 'log-group'

# S3 bucket lifecycle to S3-int
LCDAYS = 90 
LCDAYS_POLICY = 'LC_TO_INT'
BUCKET_CASES = 'cases'

BUCKET_NAME_BATCHES = 'batches'
BUCKET_NAME_CATEGORY_BASE = 'examples'
BUCKET_NAME_LLM_BASE = 'llm-output'
BUCKET_NAME_ARCHIVE = 'archive'

BUCKET_NAME_REPORT_BASE = 'report'

# where CID retrieves the cases
BUCKET_NAME_CID = 'cid-data-' + account_id

# set this to true, to not look for files in CUR directories
CID_SKIP = 'true' 

BUCKET_NAME_CASES_AGG_BASE = 'cases-agg'
BUCKET_NAME_HEALTH_AGG_BASE = 'health-agg'

###
# OpenSearch Serverless Health Events
OPENSEARCH_COLLECTION_NAME = 'maki-health'
OPENSEARCH_INDEX = 'amazon-health-events'

###
# EventBridge Health Events Integration
# Enable real-time health event processing via EventBridge
EVENTBRIDGE_HEALTH_ENABLED = True
EVENTBRIDGE_IMMEDIATE_PROCESSING = True  # Trigger immediate MAKI processing for critical events
EVENTBRIDGE_CRITICAL_SERVICES = ['EC2', 'RDS', 'S3', 'LAMBDA', 'DYNAMODB']  # Services that trigger immediate processing

####
# IAM
EXEC_ROLE = 'maki-exec-role'

###
BEDROCK_INF_METHOD_ROUTER_NAME_BASE = 'inference-method-router'

####
# Lambda configs to check for batch inference jobs
CHECK_BATCH_INFERENCE_JOBS_NAME_BASE = 'check-batch-inference-jobs'
CHECK_BATCH_INFERENCE_JOBS_TIMEOUT = 900
CHECK_BATCH_INFERENCE_JOBS_MEMORY = 128
CHECK_BATCH_INFERENCE_JOBS_DESC = 'check batch inference jobs'
CHECK_BATCH_INFERENCE_JOBS_PATH = 'lambda/checkBatchInferenceJobs'
CHECK_BATCH_INFERENCE_JOBS_HANDLER_FILE = 'checkBatchInferenceJobs_handler'
CHECK_BATCH_INFERENCE_JOBS_HANDLER_FUNC = 'handler'
CHECK_BATCH_INFERENCE_JOBS_RETRIES = 0

# Lambda configs to check for running jobs
CHECK_ENABLED_MODELS_NAME_BASE = 'check-enabled_models'
CHECK_ENABLED_MODELS_TIMEOUT = 900
CHECK_ENABLED_MODELS_MEMORY = 128
CHECK_ENABLED_MODELS_DESC = 'check enabled models'
CHECK_ENABLED_MODELS_PATH = 'lambda/checkEnabledModels'
CHECK_ENABLED_MODELS_HANDLER_FILE = 'checkEnabledModels_handler'
CHECK_ENABLED_MODELS_HANDLER_FUNC = 'handler'
CHECK_ENABLED_MODELS_RETRIES = 0

# Lambda configs to check for running jobs
CHECK_RUNNING_JOBS_NAME_BASE = 'check-running-jobs'
CHECK_RUNNING_JOBS_TIMEOUT = 900
CHECK_RUNNING_JOBS_MEMORY = 128
CHECK_RUNNING_JOBS_DESC = 'check running jobs'
CHECK_RUNNING_JOBS_PATH = 'lambda/checkRunningJobs'
CHECK_RUNNING_JOBS_HANDLER_FILE = 'checkRunningJobs_handler'
CHECK_RUNNING_JOBS_HANDLER_FUNC = 'handler'
CHECK_RUNNING_JOBS_RETRIES = 0


# Lambda configs for getting cases from CID
GET_CID_CASES_NAME_BASE = 'GetCasesFromCID'
GET_CID_CASES_TIMEOUT = 900
GET_CID_CASES_MEMORY = 10240
GET_CID_CASES_DESC = 'get cases from the CID'
GET_CID_CASES_PATH = 'lambda/getCasesFromCID'
GET_CID_CASES_HANDLER_FILE = 'getCasesFromCID_handler'
GET_CID_CASES_HANDLER_FUNC = 'handler'
GET_CID_CASES_RETRIES = 0

# Lambda configs for getting health events from OpenSearch
GET_HEALTH_FROM_OPENSEARCH_NAME_BASE = 'GetHealthFromOpenSearch'
GET_HEALTH_FROM_OPENSEARCH_TIMEOUT = 900
GET_HEALTH_FROM_OPENSEARCH_MEMORY = 10240
GET_HEALTH_FROM_OPENSEARCH_DESC = 'get health events from OpenSearch'
GET_HEALTH_FROM_OPENSEARCH_PATH = 'lambda/getHealthFromOpenSearch'
GET_HEALTH_FROM_OPENSEARCH_HANDLER_FILE = 'getHealthFromOpenSearch_handler'
GET_HEALTH_FROM_OPENSEARCH_HANDLER_FUNC = 'handler'
GET_HEALTH_FROM_OPENSEARCH_RETRIES = 0

# Lambda configs for using Bedrock ondemand inference
BEDROCK_ONDEMAND_INF_NAME_BASE = 'cases-ondemand-inference'
BEDROCK_ONDEMAND_INF_TIMEOUT = 900
BEDROCK_ONDEMAND_INF_MEMORY = 10240
BEDROCK_ONDEMAND_INF_DESC = 'ondemand inference'
BEDROCK_ONDEMAND_INF_PATH = 'lambda/bedrockOnDemandInference'
BEDROCK_ONDEMAND_INF_HANDLER_FILE = 'bedrockOnDemandInference_handler'
BEDROCK_ONDEMAND_INF_HANDLER_FUNC = 'handler'
BEDROCK_ONDEMAND_INF_RETRIES = 0

BEDROCK_HEALTH_ONDEMAND_INF_NAME_BASE = 'health-ondemand-inference'
BEDROCK_HEALTH_ONDEMAND_INF_TIMEOUT = 900
BEDROCK_HEALTH_ONDEMAND_INF_MEMORY = 10240
BEDROCK_HEALTH_ONDEMAND_INF_DESC = 'health ondemand inference'
BEDROCK_HEALTH_ONDEMAND_INF_PATH = 'lambda/bedrockOnDemandInference'
BEDROCK_HEALTH_ONDEMAND_INF_HANDLER_FILE = 'bedrockOnDemandInferenceHealth_handler'
BEDROCK_HEALTH_ONDEMAND_INF_HANDLER_FUNC = 'handler'
BEDROCK_HEALTH_ONDEMAND_INF_RETRIES = 0

# Lambda to create batch inf records
GEN_BATCH_INF_RECORDS_NAME_BASE = 'gen-batch-inference-records'
GEN_BATCH_INF_RECORDS_TIMEOUT = 900
GEN_BATCH_INF_RECORDS_MEMORY = 10240
GEN_BATCH_INF_RECORDS_DESC = 'generate batch inference records'
GEN_BATCH_INF_RECORDS_PATH = 'lambda/genBatchInferenceRecords'
GEN_BATCH_INF_RECORDS_HANDLER_FILE = 'genBatchInferenceRecords_handler'
GEN_BATCH_INF_RECORDS_HANDLER_FUNC = 'handler'
GEN_BATCH_INF_RECORDS_RETRIES = 0

# Lambda configs to clean output files
CLEAN_OUTPUT_FILES_NAME_BASE = 'clean-output-files'
CLEAN_OUTPUT_FILES_TIMEOUT = 900
CLEAN_OUTPUT_FILES_MEMORY = 128
CLEAN_OUTPUT_FILES_DESC = 'clean output files'
CLEAN_OUTPUT_FILES_PATH = 'lambda/cleanOutputFiles'
CLEAN_OUTPUT_FILES_HANDLER_FILE = 'cleanOutputFiles_handler'
CLEAN_OUTPUT_FILES_HANDLER_FUNC = 'handler'
CLEAN_OUTPUT_FILES_RETRIES = 0

# Lambda configs for creating Bedrock batch inference job
BEDROCK_BATCH_INF_JOB_NAME_BASE = 'batch-inference'
BEDROCK_BATCH_INF_JOB_TIMEOUT = 900
BEDROCK_BATCH_INF_JOB_MEMORY = 10240
BEDROCK_BATCH_INF_JOB_DESC = 'create Bedrock batch inference job'
BEDROCK_BATCH_INF_JOB_PATH = 'lambda/bedrockBatchInferenceJob'
BEDROCK_BATCH_INF_JOB_HANDLER_FILE = 'bedrockBatchInferenceJob_handler'
BEDROCK_BATCH_INF_JOB_HANDLER_FUNC = 'handler'
BEDROCK_BATCH_INF_JOB_RETRIES = 0

# Lambda configs for creating Bedrock process output job 
BEDROCK_PROCESS_BATCH_OUTPUT_NAME_BASE = 'process-batch-output'
BEDROCK_PROCESS_BATCH_OUTPUT_TIMEOUT = 900
BEDROCK_PROCESS_BATCH_OUTPUT_MEMORY = 10240
BEDROCK_PROCESS_BATCH_OUTPUT_DESC = 'process Bedrock batch inference output'
BEDROCK_PROCESS_BATCH_OUTPUT_PATH = 'lambda/bedrockProcessBatchOutput'
BEDROCK_PROCESS_BATCH_OUTPUT_HANDLER_FILE = 'bedrockProcessBatchOutput_handler'
BEDROCK_PROCESS_BATCH_OUTPUT_HANDLER_FUNC = 'handler'
BEDROCK_PROCESS_BATCH_OUTPUT_RETRIES = 0

# Lambda to process ondemand inference output
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_NAME_BASE = 'cases-process-ondemand'
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_TIMEOUT = 900
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_MEMORY = 10240
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_DESC = 'process ondemand inference output'
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_PATH = 'lambda/bedrockProcessOnDemandOutput'
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_HANDLER_FILE = 'bedrockProcessOnDemandOutput_handler'
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_HANDLER_FUNC = 'handler'
BEDROCK_PROCESS_CASES_ONDEMAND_OUTPUT_RETRIES = 0

BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_NAME_BASE = 'health-process-ondemand'
BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_TIMEOUT = 900
BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_MEMORY = 10240
BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_DESC = 'process health ondemand inference output'
BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_PATH = 'lambda/bedrockProcessOnDemandOutput'
BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_HANDLER_FILE = 'bedrockProcessOnDemandOutput_handler'
BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_HANDLER_FUNC = 'handler'
BEDROCK_PROCESS_HEALTH_ONDEMAND_OUTPUT_RETRIES = 0

# this Lambda layer is used to store prompts that generate Bedrock batch inference records from CID and synthetic records
PROMPT_GEN_CASES_INPUT_LAYER_PATH = 'lambda/layers/prompt_gen_input'
PROMPT_GEN_CASES_INPUT_LAYER_NAME_BASE = 'MakiPromptGenCasesInput'
PROMPT_GEN_CASES_INPUT_LAYER_DESC = 'MAKI Prompt Cases Input Layer'

# this lambda layer is used to process and aggregate the output from Bedrock batch inference
PROMPT_AGG_CASES_LAYER_PATH = 'lambda/layers/prompt_agg_cases'
PROMPT_AGG_CASES_LAYER_NAME_BASE = 'MakiPromptAggCases'
PROMPT_AGG_CASES_LAYER_DESC = 'MAKI Prompt Aggregate Cases Layer'

PROMPT_AGG_HEALTH_LAYER_PATH = 'lambda/layers/prompt_agg_health'
PROMPT_AGG_HEALTH_LAYER_NAME_BASE = 'MakiPromptAggHealth'
PROMPT_AGG_HEALTH_LAYER_DESC = 'MAKI Prompt Aggregate Health Layer'

# this Lambda layer is used for various S3 functions
S3_UTILS_LAYER_PATH = 'lambda/layers/s3_utils'
S3_UTILS_LAYER_NAME_BASE = 'MakiS3Utils'
S3_UTILS_LAYER_DESC = 'MAKI S3 Utils Layer'

# this Lambda layer is used for various json methods
JSON_UTILS_LAYER_PATH = 'lambda/layers/json_utils'
JSON_UTILS_LAYER_NAME_BASE = 'MakiJsonUtils'
JSON_UTILS_LAYER_DESC = 'MAKI JSON Utils Layer'

OPENSEARCH_UTILS_LAYER_PATH = 'lambda/layers/opensearch_utils'
OPENSEARCH_UTILS_LAYER_NAME_BASE = 'MakiOpenSearchUtils'
OPENSEARCH_UTILS_LAYER_DESC = 'MAKI OpenSearch Utils Layer'

#Sagemaker
SAGEMAKER_INSTANCE_TYPE = "ml.t3.medium"
SAGEMAKER_NOTEBOOK_NAME = "maki-notebook"
